Source Code:

#include <stdio.h>
#include<sys/time.h>

__device__ void print_list(int* data) {
    if (threadIdx.x == 0) {
        for (int i = 0; i < 64; i++) {
            printf("%d ", data[i]);
        }
        printf("\n\n");
    }
}

__device__ void swap(int* a, int* b) {
    int temp;
    if (*a > *b) {
        temp = *a;
        *a = *b;
        *b = temp;
    }
}

__device__ void sort32(int* data) {
    for (int i = 0; i < 32; i++) {
        swap(&data[2 * threadIdx.x], &data[2 * threadIdx.x + 1]);
        __syncthreads();
        swap(&data[2 * threadIdx.x + 1], &data[2 * threadIdx.x + 2]);
        __syncthreads();
    }
}

__global__ void testKernel(void) {
    __shared__ int data[65];

    // Generate some un-sorted data...
    data[2 * threadIdx.x] = threadIdx.x + 20;
    data[(2 * threadIdx.x) + 1] = 100 - threadIdx.x;
    data[64] = 99999; // easier than dealing with edge case

    sort32(data);
    print_list(data);
}

int main(void) {
    cudaEvent_t start , stop ;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start);
    testKernel<<<1, 32>>>(); // Just 1 warp!
    cudaEventRecord(stop);
    cudaEventSynchronize(stop);
    float ms = 0 ;
    cudaEventElapsedTime(&ms , start , stop);
    printf("Execution Time : %f ms " , ms);
    cudaEventDestroy(start);
    cudaEventDestroy(stop);
    cudaDeviceSynchronize();

    return 0;
}

Sample Output:


20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100

Execution Time : 27.754496 ms

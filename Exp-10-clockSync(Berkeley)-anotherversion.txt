#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    srand(time(NULL) + rank);  
    double clock_offset = ((double)rand() / RAND_MAX) * 20.0 - 10.0;
    double local_time = MPI_Wtime() + clock_offset;

    if (rank == 0) {
        printf("Before synchronization:\n");
    }
    MPI_Barrier(MPI_COMM_WORLD); 
    printf("Process %d local time: %.2f %.2f\n", rank, local_time,local_time-clock_offset);
    MPI_Barrier(MPI_COMM_WORLD);


    double* all_times = NULL;
    if (rank == 0) {
        all_times = (double*)malloc(size * sizeof(double));
    }
    MPI_Gather(&local_time, 1, MPI_DOUBLE, all_times, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    double adjustment = 0.0;
    int i;
    if (rank == 0) {
  
        double sum = 0.0;
        for (i = 0; i < size; i++) {
            sum += all_times[i];
        }
        double average = sum / size;


        double* adjustments = (double*)malloc(size * sizeof(double));
        for (i = 0; i < size; i++) {
            adjustments[i] = average - all_times[i];
        }


        MPI_Scatter(adjustments, 1, MPI_DOUBLE, &adjustment, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

        free(adjustments);
        free(all_times);
    } else {
        MPI_Scatter(NULL, 1, MPI_DOUBLE, &adjustment, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    }

    local_time += adjustment;

    if (rank == 0) {
        printf("\nAfter synchronization:\n");
    }
    MPI_Barrier(MPI_COMM_WORLD);
    printf("Process %d adjusted time: %.2f (adjustment: %.2f)\n", rank, local_time, adjustment);
    MPI_Barrier(MPI_COMM_WORLD);

    MPI_Finalize();
    return 0;
}

sampleoutput:
Before synchronization:
Process 1 local time: 5.30 0.00
Process 2 local time: 2.48 0.00
Process 0 local time: -1.85 0.00
Process 3 local time: -0.41 0.00

After synchronization:
Process 2 adjusted time: 1.38 (adjustment: -1.10)
Process 1 adjusted time: 1.38 (adjustment: -3.92)
Process 3 adjusted time: 1.38 (adjustment: 1.79)
Process 0 adjusted time: 1.38 (adjustment: 3.23)

